date: Pending

behavior_changes:
# *Changes that are expected to cause an incompatibility if applicable; deployment changes are likely required*

minor_behavior_changes:
# *Changes that may cause incompatibilities for some users, but should not for most*
- area: geoip
  change: |
    The lookup for ASN information is fetched from ``asn_db`` if ``asn_db_path`` is defined and from ``isp_db`` if
    ``asn_db_path`` is not defined.
- area: lua
  change: |
    The ``metadata()`` of the Lua filter now will search the metadata by the :ref:`filter config name
    <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name>` first.
    And if not found, it will search by the canonical name of the filter ``envoy.filters.http.lua``.
- area: grpc-json
  change: |
    Made the :ref:`gRPC JSON transcoder filter's <config_http_filters_grpc_json_reverse_transcoder>` JSON print options configurable.
- area: oauth2
  change: |
    Reset CSRF token when token validation fails during redirection.
    If the CSRF token cookie is present during the redirection to the authorization server, it will be validated.
    Previously, if this validation failed, the OAuth flow would fail. Now the CSRF token will simply be reset. This fixes
    the case where an HMAC secret change causes a redirect flow, but the CSRF token cookie hasn't yet expired
    causing a CSRF token validation failure.
- area: cel
  change: |
    Precompile regexes in CEL expressions. This can be disabled by setting the runtime guard
    ``envoy.reloadable_features.enable_cel_regex_precompilation`` to ``false``.
- area: dns
  change: |
    Allow ``getaddrinfo`` to be configured to run by a thread pool, controlled by :ref:`num_resolver_threads
    <envoy_v3_api_field_extensions.network.dns_resolver.getaddrinfo.v3.GetAddrInfoDnsResolverConfig.num_resolver_threads>`.
- area: dns
  change: |
    Honor the default DNS resolver configuration in the bootstrap config
    :ref:`typed_dns_resolver_config <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.typed_dns_resolver_config>`
    if the DNS cache configuration in the dynamic forward proxy filter is empty
    :ref:`dns_cache_config <envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config>`.
- area: grpc-json-transcoding
  change: |
    Added SSE style message framing for streamed responses in :ref:`gRPC JSON transcoder filter <config_http_filters_grpc_json_transcoder>`.
- area: http
  change: |
    :ref:`response_headers_to_add <envoy_v3_api_field_config.route.v3.Route.response_headers_to_add>` and
    :ref:`response_headers_to_remove <envoy_v3_api_field_config.route.v3.Route.response_headers_to_remove>`
    will also be applied to the local responses from the ``envoy.filters.http.router`` filter.
- area: tracing
  change: |
    Added :ref:`max_cache_size <envoy_v3_api_field_config.trace.v3.OpenTelemetryConfig.max_cache_size>`
    to the OpenTelemetry tracer config. This limits the number of spans that can be cached before flushing.
- area: aws
  change: |
    :ref:`AwsCredentialProvider <envoy_v3_api_msg_extensions.common.aws.v3.AwsCredentialProvider>` now supports all defined credential
    providers, allowing complete customization of the credential provider chain when using AWS request signing extension.
- area: ext_proc
  change: |
    If the ext_proc server sends a spurious response message to Envoy, Envoy now performs fail-open or fail-close action based on
    :ref:`failure_mode_allow <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.failure_mode_allow>`
    configuration. This change can be reverted by setting the runtime guard
    ``envoy.reloadable_features.ext_proc_fail_close_spurious_resp`` to ``false``.
- area: filters
  change: |
    :ref:`Credential injector filter <envoy_v3_api_msg_extensions.filters.http.credential_injector.v3.CredentialInjector>` is no longer
    a work in progress field.
- area: oauth2
  change: |
    The access token, ID token and refresh token in the cookies are now encrypted using the HMAC secret. This behavior can
    be reverted by setting the runtime guard ``envoy.reloadable_features.oauth2_encrypt_tokens`` to ``false``.
- area: http3
  change: |
    Validate HTTP/3 pseudo headers. Can be disabled by setting ``envoy.restart_features.validate_http3_pseudo_headers`` to ``false``.
- area: formatter
  change: |
    Now the ``METADATA`` and ``CEL`` substitution formatters can access or log the metadata of
    the virtual host in case the route is not matched but the virtual host is found.
- area: oauth2
  change: |
    Extension status changed from ``alpha`` to ``stable``.
- area: oauth2
  change: |
      Starting from this release, these cookies: oauth_hmac,oauth_expires,refresh_token,oauth_nonce,code_verifier will
      not be forwarded to the upstream. This behavior can be reverted by setting the runtime guard
      ``envoy.reloadable_features.oauth2_cleanup_cookies`` to ``false``.
- area: websocket
  change: |
      Allow 4xx and 5xx to go through the filter chain for websocket handshake response check, and the behaviour can be disabled
      by a runtime ``envoy.reloadable_features.websocket_allow_4xx_5xx_through_filter_chain``.

bug_fixes:
# *Changes expected to improve the state of the world and are unlikely to have negative effects*

removed_config_or_runtime:
# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`
- area: router
  change: |
    Removed runtime guard ``envoy.reloadable_features.shadow_policy_inherit_trace_sampling`` and legacy code paths.
- area: dynamic_forward_proxy
  change: |
    Removed runtime guard ``envoy.reloadable_features.avoid_dfp_cluster_removal_on_cds_update`` and legacy code paths.
- area: oauth2
  change: |
    Removed runtime guard ``envoy.reloadable_features.oauth2_use_refresh_token`` and legacy code paths.

new_features:
- area: health_check
  change: |
    Added support for request payloads in HTTP health checks. The ``send`` field in ``HttpHealthCheck`` can now be
    used to specify a request body to be sent during health checking. This feature supports both hex-encoded text
    and binary payloads, similar to TCP health checks. The payload can only be used with HTTP methods that support
    request bodies (POST, PUT, PATCH, OPTIONS). Methods that must not have request bodies (GET, HEAD, DELETE, TRACE)
    are validated and will throw an error if combined with payloads. The implementation is optimized to process the
    payload once during configuration and reuse it for all health check requests. See :ref:`HttpHealthCheck
    <envoy_v3_api_msg_config.core.v3.HealthCheck.HttpHealthCheck>` for configuration details.
- area: lua
  change: |
    Added a new ``filterState()`` on ``streamInfo()`` which provides access to filter state objects stored during request processing.
    This allows Lua scripts to retrieve string, boolean, and numeric values stored by various filters for use in routing decisions,
    header modifications, and other processing logic. See :ref:`Filter State API <config_http_filters_lua_stream_info_filter_state_wrapper>`
    for more details.
- area: ratelimit
  change: |
    Add the :ref:`rate_limits
    <envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimit.rate_limits>`
    field to generate rate limit descriptors. If this field is set, the
    :ref:`VirtualHost.rate_limits<envoy_v3_api_field_config.route.v3.VirtualHost.rate_limits>` or
    :ref:`RouteAction.rate_limits<envoy_v3_api_field_config.route.v3.RouteAction.rate_limits>` fields will be ignored. However,
    :ref:`RateLimitPerRoute.rate_limits<envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimitPerRoute.rate_limits>`
    will take precedence over this field.

deprecated:
